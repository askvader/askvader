-- : forall (f : TT) -> Applicative (FreeAp f)

let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative

  = \(ff : TT) ->
    { pure =  λ(a : Type) → λ(x : a) →
      (( \(gg : TT)
      -> \(ggAp : Applicative gg)
      -> \(k_ : forall (x:T) -> ff x -> gg x)
      -> ggAp.pure a x
      ) : FreeAp ff a)
    , ap =
        \(a:T)
      ->\(b:T)
      ->\(f:FreeAp ff (a -> b))
      ->\(x:FreeAp ff a)
      -> ( \(gg:TT)
         ->\(ggAp : Applicative gg)
         ->\(k : forall (x:T) -> ff x -> gg x)
         -> ggAp.ap a b (f gg ggAp k) (x gg ggAp k)
         )
    } /\ FreeAp_functor ff

in
FreeAp_applicative
