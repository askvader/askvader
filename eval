#!/usr/bin/env runghc
-- vi:syntax=haskell
{-# LANGUAGE OverloadedStrings #-}

-- TODO FIXME this should no longer generate NIX
-- It's main responsibility should be to convert [Text] to DynExpr (as Dhall can not parse Text)

import System.Environment
import System.Process
import Data.List (intercalate)
import qualified Data.Text as Text

main = do

  -- TODO support calling with N arguments...
  args1 <- getArgs
  -- TODO figure out how to parse real input
  let fullCode = "(" ++ head args1 ++ ")([<N=554433 | T:Text>])"

  nixExpr1 <- readProcess "dhall" ["normalize"] fullCode
  let nixExpr = nixExpr1

  -- Escape the nixExpr for JSON as per TF external resource protocol
  putStrLn $ "{\"nix\": " ++ show nixExpr ++ "}"

-- |
-- Some very unsafe escapes to insert arbitrary Dhall into the resulting Nix code.
--
-- Replaces
--    dhallEscapeSlash -> "/"
--    "dhallEscapeInline:X" -> X
--
-- TODO really implement the above behavior for dhallEscapeInline?
-- TODO come up with something safer
dhallEscapes :: String -> String
dhallEscapes =
    Text.unpack
  . Text.replace "{ dhallEscapePacker = {}; }" "pkgs.packer"
  . Text.replace "dhallEscapeSlash" "\"/\""
  . Text.pack
