    let Functor = ./../Functor/Type

in  let Foldable = ./../Foldable/Type

in  let Applicative = ./../Applicative/Type

in  let Traversable =
            λ(t : Type → Type)
          → { traverse :
                  ∀(f : Type → Type)
                → ∀(applicative : Applicative f)
                → ∀(a : Type)
                → ∀(b : Type)
                → (a → f b)
                → t a
                → f (t b)
            }

in  λ(t : Type → Type) → Foldable t ⩓ Functor t ⩓ Traversable t
