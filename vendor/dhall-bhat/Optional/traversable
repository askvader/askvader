    let Traversable = ./../Traversable/Type

in  let Applicative = ./../Applicative/Type

in      ./foldable
      ∧ ./functor
      ∧ { traverse =
              λ(f : Type → Type)
            → λ(applicative : Applicative f)
            → λ(a : Type)
            → λ(b : Type)
            → λ(g : a → f b)
            → λ(ts : Optional a)
            → Optional/fold
              a
              ts
              (f (Optional b))
              (   λ(x : a)
                → applicative.map b (Optional b) (λ(y : b) → Some y) (g x)
              )
              (applicative.pure (Optional b) (None b))
        }
    : Traversable Optional
