#!/usr/bin/env runghc
-- vi:syntax=haskell
{-# LANGUAGE OverloadedStrings, ScopedTypeVariables #-}

-- TODO FIXME this should no longer generate NIX
-- It's main responsibility should be to convert [Text] to DynExpr (as Dhall can not parse Text)

import System.Environment
import System.Process
import Data.List (intercalate)
import qualified Data.Text as Text

import Dhall

main = do

  -- TODO support calling with N arguments...
  args1 <- getArgs

  writeFile "DEBUG" (show $ tail args1)
  -- TODO FIXME figure out how to parse real input and plug in...
  let fullCode = "(" ++ head args1 ++ ")([<N=554433 | T:Text>])"

  -- TODO improve error message if we fail here
  dhallExpr <- Text.pack <$> readProcess "dhall" ["normalize"] fullCode

  -- NOTE
  -- Currently this is always a (Some {nixExpr : Text})
  -- See NOTE [Evaluator Protocol]
  mNixExpr :: Maybe Text <- input (Dhall.maybe $ record $ field "nixExpr" strictText) dhallExpr
  case mNixExpr of
    Nothing -> error $ "eval: Attr parser failed"
    Just nixExpr ->
      -- Escape the nixExpr for JSON as per TF external resource protocol
      putStrLn $ "{\"nix\": " ++ show nixExpr ++ "}"

-- |
-- Some very unsafe escapes to insert arbitrary Dhall into the resulting Nix code.
--
-- Replaces
--    dhallEscapeSlash -> "/"
--    "dhallEscapeInline:X" -> X
--
-- TODO really implement the above behavior for dhallEscapeInline?
-- TODO come up with something safer
dhallEscapes :: String -> String
dhallEscapes =
    Text.unpack
  . Text.replace "{ dhallEscapePacker = {}; }" "pkgs.packer"
  . Text.replace "dhallEscapeSlash" "\"/\""
  . Text.pack
