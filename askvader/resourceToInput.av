
-- Convert a resource to an input
-- TODO the Optional wrapper is just a debugging tool, should be removed
-- TODO
-- * Make test suite for RandomInteger, RandomString
-- TODO support all AwsResource properly
-- TODO split up the EKS block...
-- TODO replace all count.index etc below with Dhall normalization...
-- TODO instead of whitelisting access to API server below, fall back
--  on standard AV access rules (e.g. AWS/GCE credentials). For dev/default
--  we can leave this open *assuming* Kubernetes TLS certificates is enough
--  to protect the API server (TODO check this!).
-- TODO after deploying an EKS cluster we have to run this to setup node auth:
-- Automate?
--    terraform output eks-clusters.fruktsallad-auth | bin/askvader kubectl fruktsallad apply -f -



let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp  = ./retractFreeAp.av
let standardProviders  = ./standardProviders.av
let standardAwsOptions  = ./standardAwsOptions.av
let nixPre  = ./nixPre.av
let AwsAttribute : Type = ./AwsAttribute.av
let typeOf  = ./typeOf.av
let CannedACL : Type = ./CannedACL.av
let VersioningOptions : Type = ./VersioningOptions.av
let S3BucketR : Type = ./S3BucketR.av
let Blob : Type = ./Blob.av
let S3BucketObjectSource : Type = ./S3BucketObjectSource.av
let S3BucketObjectR : Type = ./S3BucketObjectR.av
let Monoid  = ./Monoid.av
let Const  = ./Const.av
let Const_functor  = ./Const_functor.av
let Const_applicative  = ./Const_applicative.av
let AwsInstanceConfig : Type = ./AwsInstanceConfig.av
let PrimAttr : Type = ./PrimAttr.av
let AttrF  = ./AttrF.av
let toNix  = ./toNix.av
let toNixShow  = ./toNixShow.av
let Attr  = ./Attr.av
let mapAttr  = ./mapAttr.av
let liftA2Attr  = ./liftA2Attr.av
let id  = ./id.av
let someT  = ./someT.av
let unsafeTextAttr  = ./unsafeTextAttr.av
let someAttr  = ./someAttr.av
let unsafeNatAttr  = ./unsafeNatAttr.av
let someNatAttr  = ./someNatAttr.av
let NodeConf : Type = ./NodeConf.av
let AwsInstanceR : Type = ./AwsInstanceR.av
let AwsIAMUserR : Type = ./AwsIAMUserR.av
let AwsIAMGroupR : Type = ./AwsIAMGroupR.av
let AwsIAMRoleR : Type = ./AwsIAMRoleR.av
let AwsIAMPolicyR : Type = ./AwsIAMPolicyR.av
let AwsSubnetR : Type = ./AwsSubnetR.av
let AwsEKSClusterR : Type = ./AwsEKSClusterR.av
let RandomIntegerR : Type = ./RandomIntegerR.av
let RandomStringR : Type = ./RandomStringR.av
let AwsResource : Type = ./AwsResource.av
let foldMap  = ./foldMap.av
let concatMapSepBy  = ./concatMapSepBy.av
let noFiles  = ./noFiles.av
let EvaluatorInput : Type = ./EvaluatorInput.av
let staticInput  = ./staticInput.av
let Optional_monad  = ./Optional_monad.av
let Optional_functor  = ./Optional_functor.av
let StateT  = ./StateT.av
let StateT_applicative  = ./StateT_applicative.av
let indexed  = ./indexed.av
let filter  = ./filter.av
let map  = ./map.av
let not  = ./not.av
let isZero  = ./isZero.av
let uncons  = ./uncons.av
let attrParserToState  = ./attrParserToState.av
let runAttr  = ./runAttr.av
let Text_monoid  = ./Text_monoid.av
let List_monoid  = ./List_monoid.av
let getAttrTypes  = ./getAttrTypes.av
let getAttrNames  = ./getAttrNames.av
let id  = ./id.av
let awsInstanceToInput  = ./awsInstanceToInput.av
let pureAttr  = ./pureAttr.av
let maybeToList  = ./maybeToList.av
let catMaybes  = ./catMaybes.av

let showPolicy = \(x : CannedACL) ->
  let t = merge
  { Private = \(x:{}) -> "private"
  , PublicRead = \(x:{}) -> "public-read"
  , PublicReadWrite = \(x:{}) -> "public-read-write"
  }
  x
  in "acl = \"${t}\""

let showVersioning = \(x : VersioningOptions) ->
  if x.mfaDelete
    then
    ''
    versioning {
      enabled = true
      mfa_delete = true
    }
    ''
    else
    ''
    versioning {
      enabled = true
    }
    ''

let resourceToInput

  : AwsResource -> Optional EvaluatorInput
  = \(x : AwsResource) ->
  merge
    { AwsInstance = \(x : AwsInstanceR) -> Some (awsInstanceToInput x)
    , RandomInteger = \(x : RandomIntegerR) -> Some (staticInput
      ''
      resource "random_integer" "${x.name}" {
        min     = ${Natural/show x.min}
        max     = ${Natural/show x.max}
        ${Optional/fold Natural x.seed Text (Natural/show) ""}
      }
      '')
    , RandomString = \(x : RandomStringR) -> Some (staticInput
      ''
      resource "random_string" "${x.name}" {
        length     = ${Natural/show x.length}
      }
      '')
    , S3Bucket = \(x : S3BucketR) -> Some (staticInput
      ''
      resource "aws_s3_bucket" "${x.resourceName}" {
        ${Optional/fold Text x.bucketName Text (\(name : Text) -> "bucket = \"" ++ name ++ "\"") ""}
        ${Optional/fold CannedACL x.acl Text showPolicy  ""}
        ${Optional/fold VersioningOptions x.versioning Text showVersioning ""}
      }
      ''
      )
    , S3BucketObject = \(x : S3BucketObjectR) -> None EvaluatorInput
    , AwsIAMUser = \(x : AwsIAMUserR) -> None EvaluatorInput
    , AwsIAMGroup = \(x : AwsIAMGroupR) -> None EvaluatorInput
    , AwsIAMRole = \(x : AwsIAMRoleR) -> None EvaluatorInput
    , AwsIAMPolicy = \(x : AwsIAMPolicyR) -> None EvaluatorInput
    , AwsSubnet = \(x : AwsSubnetR) -> None EvaluatorInput
    , AwsEKSCluster = \(x : AwsEKSClusterR) ->
      let clusterName = "fruktsallad"
      in
      None EvaluatorInput
    }
    x

in
resourceToInput
