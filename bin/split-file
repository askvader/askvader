#!/usr/bin/env runghc
-- vi:syntax=haskell
{-# LANGUAGE OverloadedStrings #-}

import Data.Char
import Control.Applicative
import Text.ParserCombinators.ReadP hiding (get)
import qualified Text.ParserCombinators.ReadP as P
import System.Directory (createDirectoryIfMissing)
import System.Environment (getArgs)
import Control.Monad
import Data.List (nub, isPrefixOf, intercalate)
import Control.Monad.State
import Control.Monad.Except
import Data.Maybe

{- Utility for splitting big .av files containing let-expressions.

  split-file x.av dir/

will split the file x.av and place results in dir/, thus:

- File is split after each \n that is the END of the last line containing code (e.g. not just WS or comments)
  immediately preceding a line starting with 'let'.
- The binding "let foo : T = E" places "let foo : T = E in foo" in the output file "foo.av"
- Each file is prepended by one let-line for each preceding definition
- The last block is written to 'main'


Example: This

    let X = Natural
    let foo = 1 : X
    -- About bar
    let bar = foo + 1
    in bar

becomes

cat ./X
let X = Natural
in X

cat ./foo
let X = ./X
let foo = 1 : X
in foo

cat ./bar
let X = ./X
let foo = ./foo
-- About bar
let bar = foo + 1
in bar

cat ./main
...
let bar = ./bar
in bar

As a utility, record files called package... are created, one per kind. Specifically:
  ./package         All lowercase names.
  ./packageTypes    All uppercase names with an annotation 'Type', e.g. "let Foo : Type = ..."
  ./packageTypes1   As above, kind 'Type -> Type', etc

For the above example:

./package
in { foo = ./foo, bar = ./bar }

./packageTypes
let X = ./X
in { X = ./X }

TODO other kinds?
-}

main = do
  [inputPath, dir] <- getArgs
  input <-
            readFile inputPath

  traverse print $ parseLines input
{-
  traverse print $ runParser (many1 (
            fmap ("C  "++) codeLine
            <++
            fmap ("NC "++) nonCodeLine
            -- <++
            -- emptyLine
          )) input


  let decl = runParser parseDecl input
  traverse print $ transitiveDeps decl
  render dir decl
-}
  print ()

data Line a
  = LetLine String (Maybe Kind) a
  | CodeLine a
  | OtherLine a
  | InLine
  deriving (Show)
data Block
  = Block
    { bBefore :: String
    , bName :: String
    , bKind :: Maybe Kind
    , bBody :: String
    }
  deriving (Show)

parseLines :: String -> [Line String]
parseLines = fmap go . lines
  where
    go x
      | "let" `isPrefixOf` x = LetLine "TODO" Nothing x -- TODO parse properly
      | "in" `isPrefixOf` x = InLine
      | otherwise = case runParserM nonCodeLine x of
        Just a -> OtherLine a
        Nothing -> CodeLine x

-- Covert lines to blocks
-- Note we rewrite the final 'in X' as a block corresponding to 'let main = X' here.
linesToBlocks :: [Line a] -> [Block]
linesToBlocks = undefined

blocksToDecl :: [Block] -> Decl
blocksToDecl = undefined

runParser :: ReadP a -> String -> a
runParser p inp = fst . last . ($ inp) $ readP_to_S p

runParserM :: ReadP a -> String -> Maybe a
runParserM p inp = fmap fst . listToMaybe . reverse . ($ inp) $ readP_to_S p


-- Subset of Dhall kinds for which we generate 'package...' files
data Kind = Term | Type --  | TypeToType
  deriving (Show, Eq)

showKind Nothing = ""
showKind (Just Term) = ""
showKind (Just Type) = ": Type"

-- A "declaration", generated by a single let-binding
data Decl = Decl
  { name :: String
  , kind :: (Maybe Kind) -- Nothing if not in the subset we care about, see Kind
  , body :: String
  , deps :: [Decl] -- previous declarations
  }
  deriving (Show, Eq)

-- Parse a file, return top level declaration (called 'main').
parseDecl :: ReadP Decl
parseDecl = undefined
  -- many nonCodeLine
  -- 'let' line
  -- many1 codeLine

  -- 'in' line
  -- anyLine

{-
-- | For line scanning, remembering previous character or failing.
type Scan = StateT (Maybe Char) (Either Bool)

scanChar :: Char -> Scan ()
scanChar curChar = do
  prevChar <- get
  put $ Just curChar
  if prevChar == Just '-' && curChar == '-'
    then liftEither (Left False) -- We found '--', this is not a code line
    else do
      if curChar == '\n' -- We cound a newline, this is not a code line
        then liftEither (Left False)
        else if isSpace curChar -- This is a space char, continue searching
          then pure ()
          -- This is a code line
          else liftEither (Left True)


codeLine :: ReadP String
codeLine = do
  la <- look
  -- If there is only space before the next \n or '--', this is not a code line
  case flip runStateT Nothing $ traverse scanChar la of
    Left False -> -- Not a code line
      fail "Not a code line"
    Left True -> do
      xs <- manyTill P.get (char '\n')
      pure $ xs ++ "\n"
    Right _ -> -- End of input
      pure la

emptyLine :: ReadP String
emptyLine = do
  string "\n"
-}

nonCodeLine :: ReadP String
nonCodeLine = do
  skipSpaces
  la <- look
  case la of
    [] ->
      pure ""
    '\n':_ ->
      pure ""
    _ -> do
      string "--"
      xs <- manyTill P.get (char '\n')
      pure $ "--" ++ xs ++ "\n"

-- TODO real parser
{-
parseDecl = pure $
  Decl "main" (Just Term)
  "-- This is main\nbar"
  [ Decl "bar" (Just Term)
    "-- This is bar \n foo + 1"
    [ Decl "foo" (Just Term)
      "1 : X"
      [ Decl "X" (Just Type)
        "Natural"
        []
      ]
    ]
  ]
-}

-- Transitive deps of a decl, not including itself
transitiveDeps :: Decl -> [Decl]
transitiveDeps = init . nub . go
  where
    go d = (concatMap go $ deps d) ++ [d]

-- Create a package... record from the transitive deps of the given kind
-- TODO use transitiveDeps and filter...
importsRec :: Kind -> Decl -> String
importsRec k decl =
  (\x -> "{ " ++ x ++ "\n}") . intercalate "\n, " . fmap renderEntry $ filter ((== Just k) . kind) (transitiveDeps decl)
  where
    renderEntry decl = name decl ++ " = ./" ++ name decl ++ ".av"

-- Generate a let binding importing the decl of a name
-- For all transitive dependencies of the given decl (but not itself!)
depImports :: Decl -> String
depImports d = intercalate "\n" $ fmap go $ transitiveDeps d
  where
    go decl = "let "++name decl++" "++showKind (kind decl)++" = ./" ++ name decl ++ ".av"

render :: FilePath -> Decl -> IO ()
render path decl = do
  createDirectoryIfMissing True path
  let write name = writeFile (path ++ "/" ++ name ++ ".av") . (++ "\n")

  -- Write a file for this decl and its dependencies
  write (name decl)
    (depImports decl ++ (if null (depImports decl) then "" else "\nin") ++ "\n" ++ body decl)
  void $ traverse (render path) (deps decl)

  -- Write the top level package...
  writeFile (path ++ "/package.av") (importsRec Term decl)
  writeFile (path ++ "/packageTypes.av") (importsRec Type decl)

