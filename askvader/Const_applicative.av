
let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp  = ./retractFreeAp.av
let standardProviders  = ./standardProviders.av
let standardAwsOptions  = ./standardAwsOptions.av
let nixPre  = ./nixPre.av
let AwsAttribute : Type = ./AwsAttribute.av
let typeOf  = ./typeOf.av
let CannedACL : Type = ./CannedACL.av
let VersioningOptions : Type = ./VersioningOptions.av
let S3BucketR : Type = ./S3BucketR.av
let Blob : Type = ./Blob.av
let S3BucketObjectSource : Type = ./S3BucketObjectSource.av
let S3BucketObjectR : Type = ./S3BucketObjectR.av
let Monoid  = ./Monoid.av
let Const  = ./Const.av
let Const_functor  = ./Const_functor.av
let Const_applicative
 =  \(m:Type) -> \(mon:Monoid m) ->
  ({ pure = \(a:T) -> \(x:a) -> mon.unit
  , ap =
    \(a:T)
    -> \(b:T)
    -> \(cf : Const m (a -> b))
    -> \(cx : Const m a)
    -> mon.op cf cx
  } /\ Const_functor m
  )
  : Applicative (Const m)

in
Const_applicative
