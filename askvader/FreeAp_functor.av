-- : forall (f : TT) -> Functor (FreeAp f)

let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor

  = \(ff : TT) ->
    { map =
         \(a : T)
      -> \(b : T)
      -> \(f : a -> b)
      -> \(g : FreeAp ff a)
      ->
        ((  \(gg : TT)
        -> \(ggAp : Applicative gg)
        -> \(k : forall (x:T) -> ff x -> gg x)
        -> ggAp.map a b f (g gg ggAp k)
        ): FreeAp ff b
        )
    }

in
FreeAp_functor
