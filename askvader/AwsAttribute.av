



--
-- AWS
--
-- TODO flatten for easier construction
-- Could also provide extra records like:
--      AwsAttributes.Instance.PrivateIp x
--      AwsAttributes.Text.Instance.PrivateIp x
--      AwsAttributes.Bool.Instance.AssociatePublicIpAddress
--


--
-- In Terraform attributes provide 'delayed' values that become availible as
-- the resource graph is traversed and a resource is created.
-- We currently only support attributes of the following types:
--    Text
--    Natural
--    Boolean
--
-- Attributes can be used when defining resources, which implies a dependency.
-- Note recursive resource dependencies are *not* allowed, the resource graph
-- must be a DAG.
--
-- You can pass an arbirary number of attributes to a server or container
-- configuration expression. They types must correspond, e.g.
--
--    { config = \(x : Text) -> \(y : Optional Text) -> ...
--    , attributes = [someTextAttr, someOptionalAttr...]
--    ... }
--
-- TODO all these Texts refer to the TF resource name...

let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp  = ./retractFreeAp.av
let standardProviders  = ./standardProviders.av
let standardAwsOptions  = ./standardAwsOptions.av
let nixPre  = ./nixPre.av
let AwsAttribute
 : Type = 
  < S3BucketId : Text -- { name : Text }
  | S3BucketRegion : Text -- { name : Text }
  | AwsInstancePrivateIp : Text -- { name : Text }
  | AwsIAMUserARN : Text
  | AwsIAMUserUniqueId : Text
  >

in
AwsAttribute
