--  : forall (f : TT)
--  -> forall (a : T)
--  -> forall (ap : Applicative f)
--  -> forall (fAp : FreeAp f a)
--  -> f a

let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp

  = \(f:TT) -> \(a:T) ->
  let id = \(b:T) -> \(x : f b) -> x in
  \(ap:Applicative f) -> \(fAp:FreeAp f a) ->
    fAp f ap id : f a

in
retractFreeAp
