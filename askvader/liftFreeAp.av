-- : forall (f : TT) -> forall (a : T) -> f a -> FreeAp f a

let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp

  =   \(f:TT)
    ->\(a:T)
    ->\(x:f a)
    ->( \(g:TT)
      ->\(gAp:Applicative g)
      ->\(k : forall (x:T) -> f x -> g x)
      -> k a x)

in
liftFreeAp
