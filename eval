#!/usr/bin/env runghc
-- vi:syntax=haskell
{-# LANGUAGE OverloadedStrings #-}

import System.Environment
import System.Process
import Data.List (intercalate)
import qualified Data.Text as Text

main = do

  -- TODO support calling with N arguments...
  args1 <- getArgs

  -- TODO all arguments (except the first) comes from Terraform splices
  -- Not sure what the format is, except that strings come unescaped
  -- We escape strings for now and worry about other types later
  let args = head args1 : fmap show (tail args1)

  let fullCode = concatMap (("("++) . (++")")) args

  nixExpr1 <- readProcess "dhall-to-nix" [] fullCode

  let pre =
              intercalate "\n"
              [ "{ config, pkgs, ... }:"
              , "({"
              , "  imports = [ <nixpkgs/nixos/modules/virtualisation/amazon-image.nix> ];"
              , "  ec2.hvm = true;"
              , "}"
              , "//"
              ]

  let post =
              intercalate "\n"
              [ ")"
              ]
  let nixExpr = pre ++ dhallEscapes nixExpr1 ++ post

  -- Escape the nixExpr
  putStrLn $ "{\"nix\": " ++ show nixExpr ++ "}"

-- |
-- Some very unsafe escapes to insert arbitrary Dhall into the resulting Nix code.
--
-- Replaces
--    dhallEscapeSlash -> "/"
--    "dhallEscapeInline:X" -> X
--
-- TODO really implement the above behavior for dhallEscapeInline?
-- TODO come up with something safer
dhallEscapes :: String -> String
dhallEscapes =
    Text.unpack
  . Text.replace "{ dhallEscapePacker = {}; }" "pkgs.packer"
  . Text.replace "dhallEscapeSlash" "\"/\""
  . Text.pack
