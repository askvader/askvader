

let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp  = ./retractFreeAp.av
let standardProviders  = ./standardProviders.av
let standardAwsOptions  = ./standardAwsOptions.av
let nixPre  = ./nixPre.av
let AwsAttribute : Type = ./AwsAttribute.av
let typeOf  = ./typeOf.av
let CannedACL : Type = ./CannedACL.av
let VersioningOptions : Type = ./VersioningOptions.av
let S3BucketR : Type = ./S3BucketR.av
let Blob : Type = ./Blob.av
let S3BucketObjectSource : Type = ./S3BucketObjectSource.av
let S3BucketObjectR : Type = ./S3BucketObjectR.av
let Monoid  = ./Monoid.av
let Const  = ./Const.av
let Const_functor  = ./Const_functor.av
let Const_applicative  = ./Const_applicative.av
let AwsInstanceConfig : Type = ./AwsInstanceConfig.av
let PrimAttr : Type = ./PrimAttr.av
let AttrF  = ./AttrF.av
let toNix  = ./toNix.av
let toNixShow  = ./toNixShow.av
let Attr  = ./Attr.av
let mapAttr  = ./mapAttr.av
let liftA2Attr  = ./liftA2Attr.av
let id  = ./id.av
let someT  = ./someT.av
let unsafeTextAttr  = ./unsafeTextAttr.av
let someAttr  = ./someAttr.av
let unsafeNatAttr  = ./unsafeNatAttr.av
let someNatAttr  = ./someNatAttr.av
let NodeConf : Type = ./NodeConf.av
let AwsInstanceR : Type = ./AwsInstanceR.av
let AwsIAMUserR : Type = ./AwsIAMUserR.av
let AwsIAMGroupR : Type = ./AwsIAMGroupR.av
let AwsIAMRoleR : Type = ./AwsIAMRoleR.av
let AwsIAMPolicyR : Type = ./AwsIAMPolicyR.av
let AwsSubnetR : Type = ./AwsSubnetR.av
let AwsEKSClusterR : Type = ./AwsEKSClusterR.av
let RandomIntegerR : Type = ./RandomIntegerR.av
let RandomStringR : Type = ./RandomStringR.av
let AwsResource : Type = ./AwsResource.av
let foldMap
 = 
  \(a : Type) ->
  \(xs : List a) ->
  \(r : Type) ->
  \(m :
    { empty : r
    , single : a -> r
    , compose : r -> r -> r
    } ) ->
  List/fold a xs r (\(x : a) -> m.compose (m.single x)) m.empty
  : r

in
foldMap
