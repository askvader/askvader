

--
-- NOTE currently NodeConf is Text, so the above also works with virtualization (e.g. for AMI/Docker,
-- create a packer script starting from a base image and provisioning with the Nix expression).
-- If NodeConf is changed to a *function*, the evaluator will use some Dhall backend to convert
-- this to a runnable image. This could work in several ways:
--    Blob -> Blob                 Become a (pure) web server
--    Blob -> State Blob Blob      Become a web server with (transient) state, backed by its own harddrive
--    Blob -> NodeConf             Wait for a web request, then *become* the given config
--    Blob -> Map Text NodeConf    Wait for a web request, then *launch new nodes* with the given config
--    A -> B                       Become a processor in a typed channel
--
--
-- TODO LATER special resources for cached provisions (AMIs/containers)
-- AMI-based, implemented by running packer on host machine:
--  * Resource a la AwsInstance that builds the NodeConf to an AMI and returns registered AMI
--  * Resource a la AwsInstance that takes such an AMI instead of a NodeConf
--
--
--
-- Implementation
--   Make name depend of TF config (including Nix expr) - reuse if exists in AWS account
--   Use external data source to call packer (with HS wrapper?)
--     Generates suitable JSON for packer and calls this
--       https://www.packer.io/docs/builders/amazon-ebs.html
--   Provide output attribute with the new AMI name
--   Provide this as an alternative input to AwsInstance

-- Docker-based, implemented by running docker+packer on a special instance:
--  * Resource a la AwsInstance that builds a NodeConf to a Docker container placed in ECR
--  * Resource that launches containers in EKS
--
--
--



--
-- TODO
--
-- Break recursive dependency between attrs/resources (using limited fixpoints?) to define safe
-- mappings between resources/attrs (e.g. prevent looking up an attr of resource of type A from
-- resource of type B).
--
-- Or use something like the NOTE [Safe attributes] approach, hiding the Attr constructors and
-- passing in a safe subset at the top level.



-- NOTE  [Evaluator Protocol]
--
-- The following types definne a protocol between the Dhall code and the
-- Terraform evaluator. The basic path is:
--
--  * EvaluatorInput generates a static graph passed to Terraform, except for
--  the tfContinue field, which is *normalized but not reduced to a
--  serializable type*
--
--  * For each node in the graph, we generates a special external_resource to
--  recieve inputs.  These are converted to PrimAttr, applied to the tfContinue
--  expression and *normalized as before*.
--
--  * The resultant NodeConf expression is handled by the evaluator. For a
--  NixOS config, the node is created and provisioned with the given
--  expression.
--
-- Static Inputs
-- ===
-- We allow 'static' inputs, e.g. inputs that have no dependencies in the TF
-- resource graph. The Haskell evaluator treats any EvaluatorInput where attrNames = []
-- as static. In this case the tfContinue value is ignored.
--
-- Abstraction & Interface
-- ====
--
-- Anything involving the evaluator protocol should be hidden from the user.
-- The main interface should be: user writes an expression of type (List
-- AwsResource), (List KubernetesResource) and so on for each backend.
--
-- Any changes to the Evaluator Protocol must be kept in sync between Dhall and
-- Haskell/CLI. Search for references to this note to find the relevant code
-- paths.

-- tfCodeBefore
--  Terraform code before the tfContinue block
-- tfCodeAfter
--  Terraform code after the tfCodeAfter block
-- tfContinue
-- Spliced attributes and continuation
--
-- TODO returning NodeConf here implies that TF attributes other than 'uploaded config'
-- can not depend on Attr values. We could enrich the return type here to include more
-- such data if needed.


let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp  = ./retractFreeAp.av
let standardProviders  = ./standardProviders.av
let standardAwsOptions  = ./standardAwsOptions.av
let nixPre  = ./nixPre.av
let AwsAttribute : Type = ./AwsAttribute.av
let typeOf  = ./typeOf.av
let CannedACL : Type = ./CannedACL.av
let VersioningOptions : Type = ./VersioningOptions.av
let S3BucketR : Type = ./S3BucketR.av
let Blob : Type = ./Blob.av
let S3BucketObjectSource : Type = ./S3BucketObjectSource.av
let S3BucketObjectR : Type = ./S3BucketObjectR.av
let Monoid  = ./Monoid.av
let Const  = ./Const.av
let Const_functor  = ./Const_functor.av
let Const_applicative  = ./Const_applicative.av
let AwsInstanceConfig : Type = ./AwsInstanceConfig.av
let PrimAttr : Type = ./PrimAttr.av
let AttrF  = ./AttrF.av
let toNix  = ./toNix.av
let toNixShow  = ./toNixShow.av
let Attr  = ./Attr.av
let mapAttr  = ./mapAttr.av
let liftA2Attr  = ./liftA2Attr.av
let id  = ./id.av
let someT  = ./someT.av
let unsafeTextAttr  = ./unsafeTextAttr.av
let someAttr  = ./someAttr.av
let unsafeNatAttr  = ./unsafeNatAttr.av
let someNatAttr  = ./someNatAttr.av
let NodeConf : Type = ./NodeConf.av
let AwsInstanceR : Type = ./AwsInstanceR.av
let AwsIAMUserR : Type = ./AwsIAMUserR.av
let AwsIAMGroupR : Type = ./AwsIAMGroupR.av
let AwsIAMRoleR : Type = ./AwsIAMRoleR.av
let AwsIAMPolicyR : Type = ./AwsIAMPolicyR.av
let AwsSubnetR : Type = ./AwsSubnetR.av
let AwsEKSClusterR : Type = ./AwsEKSClusterR.av
let RandomIntegerR : Type = ./RandomIntegerR.av
let RandomStringR : Type = ./RandomStringR.av
let AwsResource : Type = ./AwsResource.av
let foldMap  = ./foldMap.av
let concatMapSepBy  = ./concatMapSepBy.av
let noFiles  = ./noFiles.av
let EvaluatorInput
 : Type = 
   { tfCodeBefore : Text
   , tfCodeAfter : Text
   , attrNames: List Text
   , tfContinue: List PrimAttr -> Optional NodeConf
   }

in
EvaluatorInput
