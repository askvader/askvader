

-- TODO chose a random limit string?
-- TODO allow static files again?
-- TODO FIXME unescaped attr names may cause problems










let concatMap  = ./concatMap.av
let generate  = ./generate.av
let Functor  = ./Functor.av
let List_functor  = ./List_functor.av
let Applicative  = ./Applicative.av
let liftA2  = ./liftA2.av
let Coyoneda  = ./Coyoneda.av
let liftCoyoneda  = ./liftCoyoneda.av
let mapCoyoneda  = ./mapCoyoneda.av
let T  = ./T.av
let TT  = ./TT.av
let Free1  = ./Free1.av
let FreeAp  = ./FreeAp.av
let FreeAp_functor  = ./FreeAp_functor.av
let FreeAp_applicative  = ./FreeAp_applicative.av
let liftFreeAp  = ./liftFreeAp.av
let retractFreeAp  = ./retractFreeAp.av
let standardProviders  = ./standardProviders.av
let standardAwsOptions  = ./standardAwsOptions.av
let nixPre  = ./nixPre.av
let AwsAttribute : Type = ./AwsAttribute.av
let typeOf  = ./typeOf.av
let CannedACL : Type = ./CannedACL.av
let VersioningOptions : Type = ./VersioningOptions.av
let S3BucketR : Type = ./S3BucketR.av
let Blob : Type = ./Blob.av
let S3BucketObjectSource : Type = ./S3BucketObjectSource.av
let S3BucketObjectR : Type = ./S3BucketObjectR.av
let Monoid  = ./Monoid.av
let Const  = ./Const.av
let Const_functor  = ./Const_functor.av
let Const_applicative  = ./Const_applicative.av
let AwsInstanceConfig : Type = ./AwsInstanceConfig.av
let PrimAttr : Type = ./PrimAttr.av
let AttrF  = ./AttrF.av
let toNix  = ./toNix.av
let toNixShow  = ./toNixShow.av
let Attr  = ./Attr.av
let mapAttr  = ./mapAttr.av
let liftA2Attr  = ./liftA2Attr.av
let id  = ./id.av
let someT  = ./someT.av
let unsafeTextAttr  = ./unsafeTextAttr.av
let someAttr  = ./someAttr.av
let unsafeNatAttr  = ./unsafeNatAttr.av
let someNatAttr  = ./someNatAttr.av
let NodeConf : Type = ./NodeConf.av
let AwsInstanceR : Type = ./AwsInstanceR.av
let AwsIAMUserR : Type = ./AwsIAMUserR.av
let AwsIAMGroupR : Type = ./AwsIAMGroupR.av
let AwsIAMRoleR : Type = ./AwsIAMRoleR.av
let AwsIAMPolicyR : Type = ./AwsIAMPolicyR.av
let AwsSubnetR : Type = ./AwsSubnetR.av
let AwsEKSClusterR : Type = ./AwsEKSClusterR.av
let RandomIntegerR : Type = ./RandomIntegerR.av
let RandomStringR : Type = ./RandomStringR.av
let AwsResource : Type = ./AwsResource.av
let foldMap  = ./foldMap.av
let concatMapSepBy  = ./concatMapSepBy.av
let noFiles  = ./noFiles.av
let EvaluatorInput : Type = ./EvaluatorInput.av
let staticInput  = ./staticInput.av
let Optional_monad  = ./Optional_monad.av
let Optional_functor  = ./Optional_functor.av
let StateT  = ./StateT.av
let StateT_applicative  = ./StateT_applicative.av
let indexed  = ./indexed.av
let filter  = ./filter.av
let map  = ./map.av
let not  = ./not.av
let isZero  = ./isZero.av
let uncons  = ./uncons.av
let attrParserToState  = ./attrParserToState.av
let runAttr  = ./runAttr.av
let Text_monoid  = ./Text_monoid.av
let List_monoid  = ./List_monoid.av
let getAttrTypes  = ./getAttrTypes.av
let getAttrNames  = ./getAttrNames.av
let id  = ./id.av
let awsInstanceToInput

  : AwsInstanceR -> EvaluatorInput
  = \(instance : AwsInstanceR) ->
    let name = instance.name
    let staticFileBlock = ""
    let wrapAttr = \(x : Text) -> "\"\${" ++ x ++ "}\""
    let attrTypeBlock =
      ''
      "${../vendor/dhall-lang/Prelude/Text/concatMapSep ", " Text (id Text) (getAttrTypes instance.config)}"
      ''
    let attrBlock =
      ''
      ${../vendor/dhall-lang/Prelude/Text/concatMapSep ", " Text wrapAttr (getAttrNames instance.config)}
      ''

    -- TODO some rather ad-hoc provisioners
    -- Install AWS CLI according to AWS manual
    let setupAwsCliBlock =
      ''
      provisioner "remote-exec" {
        inline = [<<END_B12834A71827
          nix-env -iA nixos.python
          curl -O https://bootstrap.pypa.io/get-pip.py
          python get-pip.py --user
          /root/.local/bin/pip install awscli --upgrade --user
      END_B12834A71827
        ]
      }
      ''
    let copyS3OnLaunchBlock =
      ''
      provisioner "remote-exec" {
        inline = [
        "/root/.local/bin/aws s3api get-object --bucket aw-test-1831872837187287 --key data index.html"
        ]
      }
      ''
    in
    { tfCodeBefore =
    ''
          data "external" "${name}-eval" {
            program =
              [ "./bin/eval"
              , ${attrTypeBlock}
              , <<END_AHJSHDJALKASJDHKJHVHJHEJKBAB
    ''
    , tfCodeAfter =
    ''
              END_AHJSHDJALKASJDHKJHVHJHEJKBAB
              , ${attrBlock}
              ]
            query =
              {
              }
          }
          // TODO do not duplicate the key pair/security group/IAM role/instance profile blocks
          // TODO more restrictive ingress by default
          resource "aws_key_pair" "${standardAwsOptions.keyName}" {
            key_name   = "${standardAwsOptions.keyName}"
            public_key = "''${file("${standardAwsOptions.publicKeyFile}")}"
          }
          resource "aws_security_group" "standard" {
            name        = "standard"
            description = "Allow inbound HTTP and SSH + all outbound"
            ingress {
              from_port   = 22
              to_port     = 22
              protocol    = "tcp"
              cidr_blocks = ["0.0.0.0/0"]
            }
            ingress {
              from_port   = 80
              to_port     = 80
              protocol    = "tcp"
              cidr_blocks = ["0.0.0.0/0"]
            }
            egress {
              from_port       = 0
              to_port         = 0
              protocol        = "-1"
              cidr_blocks     = ["0.0.0.0/0"]
            }
          }


resource "aws_iam_role" "${name}-role" {
    name = "${name}-role"
    assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_instance_profile" "${name}-instance-profile" {
    name = "${name}-instance-profile"
    roles = ["${name}-role"]
}

resource "aws_iam_role_policy" "${name}-policy" {
  name = "${name}-policy"
  role = "''${aws_iam_role.${name}-role.id}"
  // TODO more restrictive policy
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["s3:ListBucket"],
      "Resource": ["arn:aws:s3:::bucket-name"]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ],
      "Resource": ["arn:aws:s3:::bucket-name/*"]
    }
  ]
}
EOF
}


          resource "aws_instance" "${name}" {
            ami             = "${standardAwsOptions.ami}"
            instance_type   = "${standardAwsOptions.instanceType}"
            key_name        = "${standardAwsOptions.keyName}"
            security_groups = ["standard"]
            tags {
              Name = "${name}"
            }
            root_block_device {
              volume_size = ${Natural/show standardAwsOptions.rootBlockDeviceVolumeSize.gigabytes}
            }
            iam_instance_profile = "''${aws_iam_instance_profile.${name}-profile.id}"

          }
          resource "null_resource" "${name}-prov" {
            triggers {
              build_number = "''${timestamp()}"
            }
            connection {
              type = "ssh"
              user = "root"
              host = "''${element(aws_instance.${name}.*.public_ip, 0)}"
              private_key = "''${file("${standardAwsOptions.privateKeyFile}")}"
            }
            provisioner "file" {
              content = "''${data.external.${name}-eval.result.nix}"
              destination = "/etc/nixos/configuration.nix"
            }
            provisioner "remote-exec" {
              inline = [
                "mkdir -p /var/static"
              ]
            }
            ${staticFileBlock}
            provisioner "remote-exec" {
              inline = [
                "echo *** Start of /etc/nixos/construction.nix ***",
                "cat /etc/nixos/configuration.nix",
                "echo",
                "echo *** End of /etc/nixos/construction.nix ***",
                "nixos-rebuild switch"
              ]
            }
            ${setupAwsCliBlock}
            ${copyS3OnLaunchBlock}
          }
    ''
    , attrNames = getAttrNames instance.config
    , tfContinue = runAttr instance.config
    }

in
awsInstanceToInput
